type BasicTypes = 'boolean' | 'integer' | 'number' | 'string'

type CompoundTypes = 'array' | 'map' | 'record' | 'set'

type SpecialTypes = 'foreign'

// generic properties of all type definitions
interface GenericProperties<T extends BasicTypes | CompoundTypes | SpecialTypes> {
  type: T
  // whether it must be set
  required?: boolean
  // default value arrording to the field type
  default?: unknown
  // the field will be automatically generated by server if auto is set to true
  auto?: true
  // uniqueness should be checked by server
  unique?: boolean
}

interface NumberValidators {
  between?: [min: number, max: number]
  gt?: number
}

interface StringValidators {
  len_eq?: number
  len_max?: number
  len_min?: number
  match_none?: { err: string; pattern: string }[]
}

// field validator properties
interface GenericValidators {
  eq?: any
  ne?: any
  match?: any
  not_match?: any
  match_all?: any[]
  match_any?: any[]
  starts_with?: string
  one_of?: string[]
  contains?: string
  is_regex?: string
  custom_validator?: any
}

export interface BooleanType extends GenericProperties<'boolean'> {}

export interface IntegerType extends GenericProperties<'integer'>, NumberValidators {}

export interface NumberType extends GenericProperties<'number'>, NumberValidators {}

export interface StringType extends GenericProperties<'string'>, GenericValidators, StringValidators {}

export interface ArrayType extends GenericProperties<'array'> {
  elements: StringType
  contains?: string[]
}

export interface MapType extends GenericProperties<'map'> {
  keys: unknown[]
  values: unknown[]
}

export interface RecordType extends GenericProperties<'record'> {
  fields: FieldType[]
}

export interface SetType extends GenericProperties<'set'> {
  // now we support string element in set field only
  elements: StringType
}

export interface ForeignType extends GenericProperties<'foreign'> {
  // eq can only be null when type is 'foreign'
  eq: null
  // type of the entity referenced by this entity
  reference: string
}

export type FieldType = BooleanType | IntegerType | NumberType | StringType | ArrayType | MapType | RecordType | SetType

export interface FieldSchema {
  [key: string]: FieldType
}
